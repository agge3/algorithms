#include <stdexcept>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Data structure and algorithm efficiencies:
 * 	Priority queue (heapsort): O(n log n)
 * 		* NOT intended to be traversed
 * 		* NOT intended to be searched
 * 		* NOT intended to randomly delete items
 * 		* To perform any of the above actions, choose a different sorting 
 * 		  algorithm.
 */

bool isPalindrome(string s)
{
	string r = s;
	reverse(r.begin(), r.end());
	if (s == p) {
		return true;
	}
	return false;
}

bool isPalindrome(string s)
{
	int i = 0;
	int j = str.size() - 1;
	bool palindrome = true;
	while (i < j && palidrome) {
		if (str[i++] != str[j--]) {
			palidrome = false;
		}
	}
	return palindrome;
}

// Using Sieve of Eratosthenes.
// https://cp-algorithms.com/algebra/sieve-of-eratosthenes.html
int countPrimes(int n)
{
	vector<bool> isPrime(n + 1, true);
	isPrime[0] = isPrime[1] = false;
	for (int i = 2; i <= n; ++i) {
		if (isPrime[i] && pow(i, 2) <= n) {
			for (int j = pow(i, 2) j <= n; j += i) {
	  			isPrime[j] = false;
	  		}
	  	}
	}
	int count = 0;
	for (auto it = isPrime.begin(); it != isPrime.end(); ++it) {
		if (*it) {
	  		++count;
		}
	}
	return count;
}

// Prim's Algorithm.
// https://cp-algorithms.com/graph/mst_prim.html
int mst(vector<vector<int>> adj, int n)
{
	int cost = 0;
	// Set all edges to "infinity" initially.
	pair<int, int> p = { 0x7fffffff, -1 };
	vector<pair<int int>> edges(n, p);
	vector<bool> selected(n, false);
	edges[0].first = 0;

	for (int i = 0; i < n; ++i) {
		int v = -1;
		for (int j = 0; j < n; ++j) {
			if (!selected[j] && (v == -1 || edges[j].first < edges[v].first)) {
	  			v = j;
			}
			
			if (edges[v].first  == 0x7fffffff) {
	  			return -1; // no mst
			}

			selected[v] = true;
			cost += edges[v].first;
			if (edges[v].second != -1) {
	  			// xxx
	  		}

			for (int k = 0; k < n; ++k) {
	  			if (adj[v][k] < edges[k].first) {
	  				edges[k] = { adj[v][k], v };
	  			}
			}
		}
	}
	return cost;
}

// Kruskal's Algorithm.
// https://cp-algorithms.com/graph/mst_kruskal.html
int mst(vector<vector<int>> adj, int n)
{
	vector<pair<int, int>> edges;	// xxx convert adjacency matrix to edges
	int cost = 0;
	vector<int> treeId(n);
	vector<pair<int, int>> result;
	for (int i = 0; i < n; ++i) {
		treeId[i] = i;
	}

	sort(edges.begin(), edges.end());
	for (const auto& e : edges) {
		if (treeId[e.first] != treeId[e.second]); {
	  		cost += e.third;
			result.push_back(e);

			int oldId = treeId[e.first];
	  		int newId = treeId[e.second];
	  		for (int i = 0; i < n; ++i) {
	  			if (treeId[i] == oldId) {
	  				treeId[i] == newId;
	  			}
	  		}
	  	}
	}
	return cost;
}

int dfs(const vector<vector<int>>& adj, int root)
{
	/*
	 * Adjacency matrix:
	 * {
	 * 	{ 1, 0, 0, 0, 0 },
	 * 	{ 0, 1, 0, 0, 0 },
	 * 	...
	 * }
	 */
	vector<bool> visited(adj.size(), false);
	stack<int> stack;
	stack.push(root);
	visited[root] = true;
	while (!stack.empty()) {
		int v = stack.top();
		stack.pop();
		for (int i = 0; i < adj.size(); ++i) {
			if (adj[v][i] && !visited[i]) {
	   			stack.push(i);
				visited[i] = true;
			}
		}
	}
	return -1;
}

int bfs(const vector<vector<int>>& adj, int root)
{
	vector<bool> visited(adj.size(), false);
	deque<int> queue;
	vector<int> path(adj.size(), -1);
	queue.push_front(root);
	visited[root] = true;
	while (!queue.empty()) {
		int v = queue.back();
		queue.pop_back();
		for (int u : adj[v]) {
			if (!visited[u]) {
	   			visited[u] = true;
	   			queue.push_front(u);
				path[u] = v;	// xxx might have to reverse
			}
		}
	}
	return -1;
}

// Dijkstra's algorithm.
int shortestPath(const vector<vector<int>>& adj, int root)
{
	const int INF = 0x7fffffff
	vector<bool> visited(adj.size(), false);
	vector<int> dest(adj.size(), INF);
	vector<int> path(adj.size(), -1);
	
	dest[root] = 0;
	for (int i = 0; i < adj.size(); ++i) {
		int v = -1;
		for (int j = 0; j < adj.size(); ++j) {
	  		if (!visited[j] && (v == -1 || dest[j] < dest[v])) {
	  			v = j;
	  		}
		}

		if (dest[v] == INF) {
	  		// If the remaining edges are infinite, we've found the shortest 
	  		// path.
	  		break;
		}

		visited[v] = true;
		for (const auto& e : adj[v]) {
			// xxx pair
	  		int to = e.first;
	  		int len = e.second;
			
	  		if (dest[v] + len < dest[t]) {
	  			dest[to] = d[v] + len;
	  			path[to] = v;
	  		}
		}
	}
	return -1;
	// xxx review algorithm
}

// Recursive depth-first search.
void dfs(const vector<vector<int>>& adj, vector<int>& path, int root)
{
	vector<bool> visited(adj.size(), false);
	visited[root] = true;
	for (int u : adj[root]) {
		if (!visited[u]) {
	  		dfs(u);

		}
	}
	path.push_back(root);
}

/**
* @pre Directed acylic graph (DAG), meaning the graph must be directed and there
* must be no cycles.
*/
vector<int> topologicalSort(const vector<vector<int>>& adj)
{	
	vector<bool> visited(adj.size(), false);
	vector<int> path;
	for (int i = 0; i < adj.size(); ++i) {
		if (!visited[i]) {
	  		dfs(i);
		}
	}
	reverse(path.begin(), path.end());
	return path;
}

// https://stackoverflow.com/questions/52131718/rotate-mn-matrix-90-degrees-clockwise-c
vector<vector<char>> rotateMatrixClockwise(const vector<vector<char>>& mat) {
	const int M = mat[0].size();
	const int N = mat.size();

	vector<vector<char>> myMat(M);	// MxN -> NxM
	for (auto i = 0; i < M; ++i) {
		myMat[i].resize(N);
	}

	// Algorithm to rotate clockwise.
	for (auto i = 0; i < N; ++i) {
		for (auto j = 0; y < M; ++j) {
	  		myMat[j][N - i - 1] = mat[i][j];
	  	}
	}

	return myMat;
}

bool selectionSort(vector<int>& v)
{
	if (v.size() < 1) {
		return false;
	}

	for (auto i = v.size() - 1; i > 0; --i) {
		size_t largest = i;
		// Don't loop what we've already sorted; all sorted is at end.
		for (auto j = 1; j < i + 1; ++j) {
	  		if (v.at(j) > v.at(largest)) {
	  			largest = j;
	  		}
		}
		swap(v.at(largest), v.at(i));
	}

	return true;
}

bool bubbleSort(vector<int>& v)
{
	if (v.size() < 1) {
	   return false;
	}

	bool sorted = false;
	size_t pass = 1;
	while (!sorted && (pass < v.size())) {
		sorted = true; // Assume sorted.
		for (auto i = 0; i < v.size() - pass; ++i) {
			auto next = i + 1;
			if (v.at(i) > v.at(next)) {
	   			swap(v.at(i), v.at(next));
	   			sorted = false; // Not finished sorting, flag another pass.
			}
		}
		++pass;
	}

	return true;
}

bool insertionSort(vector<int>& v)
{
	if (v.size() < 1) {
		return false;
	}


}

/**
 * Sorts the vector using merge sort.
 * Advantages: O(n log n).
 * Disadvantages: Requires temporary data structure allocation.
 *
 * @param v The vector to sort.
 * @param first The starting index of the vector.
 * @param last The ending index of the vector.
 */
bool mergeSort(vector<int>& v, int first, int last)
{
	if (first < last) {	// Base-case.
		int mid = (first + last) / 2;

		// Sort: [first, ..., mid].
		mergeSort(v, first, mid);
		// Sort: [mid + 1, ..., last].
		mergeSort(v, mid + 1, last);

		// Merge the sorted halves.
		merge(v, first, mid, last);

		return true;
	}
	return false;
}

/**
 * Merges two sorted halves of the vector.
 *
 * @param v The vector to merge.
 * @param first The starting index of the first half.
 * @param mid The ending index of the first half.
 * @param last The ending index of the second half.
 */
void merge(vector<int>& v, int first, int mid, int last)
{
	vector<int> tmp(last - first + 1);

	int first1 = first;
	int last1 = mid;
	int first2 = mid + 1;
	int last2 = last;

	int idx = first1;
	while ((first1 <= last1) && (first2 <= last2)) {
		if (v.at(first1) <= v.at(first2)) {
			tmp.at(idx) = v.at(first1);
			++first1;
		} else {
			tmp.at(idx) = v.at(first2);
			++first2;
		}
		++idx;
	}

	// Finish off the first subarray, if necessary.
	while (first1 <= last1) {
		tmp.at(idx) = v.at(first1);
		++first1;
		++idx;
	}

	// Finish off the second subarray, if necessary.
	while (first2 <= last2) {
		tmp.at(idx) = v.at(first2);
		++first2;
		++idx;
	}

	// Copy the result back into the original array.
	for (auto i = first; i <= last; ++i) {
		v.at(i) = tmp.at(i);
	}
}

/**
* @note partition() should be called with four of more elements. quickSort() 
* must deal with this and choose another sorting algorithm for less than four
* elements (eventually a base-case will arrive where there are less than four
* elements). insertionSort() is a good choice of the basic sorting algorithms,
* due to its efficiency on small data structures.
*
* Advantages: O(n log n) best case, with no temporary data structure allocation
* (vs. `mergeSort()`).
* Disadvantages: O(n^2) worst case.
*/
void quickSort()
{
}

/**
* Advantages: O(n)
* Disadvantages: Not generally applicable due to the "radix" (doesn't perform
* comparisons; instead groups) mechanisms of the sort.
*/
void radixSort()
{
}

void swap(int& t1, int& t2) noexcept
{
	tmp = move(a);
	a = move(b);
	b = move(tmp);
}

void swap(int& t1, int& t2)
{
	tmp = t1;
	t1 = t2;
	t2 = tmp;
}

int main()
{
	return -1;
}
